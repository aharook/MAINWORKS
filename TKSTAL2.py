import tkinter as tk
from tkinter import messagebox

# –°—Ç–∞–Ω–∏ –≥—Ä–∏
money = 1000
HP = 100
radiation = 0
hungruy = 0
armor = 0

artifacts = [
    {"name": "–ö–†–û–í –ö–ê–ú–ï–ù–Æ", "description": "–ü–æ—Å—Ç—É–ø–æ–≤–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î –∑–¥–æ—Ä–æ–≤'—è.", "effects": {"HP": 10}, "price": 150},
    {"name": "–î–£–®–ê", "description": "–ó–º–µ–Ω—à—É—î —Ä–∞–¥—ñ–∞—Ü—ñ—é.", "effects": {"radiation": -5}, "price": 250}
]
inventory_artifacts = []

def update_stats():
    stats.config(text=f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {HP}%   ‚ò¢ –†–∞–¥—ñ–∞—Ü—ñ—è: {radiation}%   üçñ –ì–æ–ª–æ–¥: {hungruy}%   üõ° –ë—Ä–æ–Ω—è: {armor}%   üí∞ –ì—Ä–æ—à—ñ: {money}‚Ç¥")

def use_artifact(index):
    global HP, radiation
    if 0 <= index < len(inventory_artifacts):
        art = inventory_artifacts.pop(index)
        HP = min(100, HP + art["effects"].get("HP", 0))
        radiation = max(0, radiation + art["effects"].get("radiation", 0))
        update_stats()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {art['name']}")
        show_artifacts()
    else:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")

def show_artifacts():
    win = tk.Toplevel(root)
    win.title("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏")
    win.geometry("400x300")
    if not inventory_artifacts:
        tk.Label(win, text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤", font=("Arial", 12)).pack(pady=20)
        return
    for i, art in enumerate(inventory_artifacts):
        btn = tk.Button(win, text=f"{i+1}. {art['name']} ‚Äî {art['description']}", font=("Arial", 11),
                        command=lambda i=i: use_artifact(i))
        btn.pack(fill='x', padx=10, pady=5)

def inventory_window():
    win = tk.Toplevel(root)
    win.title("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä")
    win.geometry("400x250")
    items = ["–ü—ñ—Å—Ç–æ–ª–µ—Ç", "–ì—Ä–∞–Ω–∞—Ç–∞", "–ê–ø—Ç–µ—á–∫–∞"]

    for item in items:
        tk.Label(win, text=item, font=("Arial", 12)).pack(pady=2)

    def heal():
        global HP
        HP = min(100, HP + 20)
        update_stats()
        messagebox.showinfo("–ê–ø—Ç–µ—á–∫–∞", "–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –∞–ø—Ç–µ—á–∫—É.")

    tk.Button(win, text="ü©π –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–ø—Ç–µ—á–∫—É", command=heal, font=("Arial", 12), bg="#28a745", fg="white").pack(pady=10)

def shop():
    win = tk.Toplevel(root)
    win.title("–°–∏–¥–æ—Ä–æ–≤–∏—á")
    win.geometry("450x300")

    tk.Label(win, text="üíº –ú–∞–≥–∞–∑–∏–Ω –°–∏–¥–æ—Ä–æ–≤–∏—á–∞", font=("Arial", 16)).pack(pady=10)
    for art in artifacts:
        btn = tk.Button(win, text=f"{art['name']} ‚Äî {art['price']}‚Ç¥\n{art['description']}", font=("Arial", 11),
                        command=lambda a=art: buy_artifact(a), wraplength=400, justify='left')
        btn.pack(fill='x', padx=10, pady=5)

def buy_artifact(artifact):
    global money
    if money >= artifact["price"]:
        inventory_artifacts.append(artifact)
        money -= artifact["price"]
        update_stats()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏: {artifact['name']}")
    else:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π!")

# –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ
#gitcoomit
root = tk.Tk()
root.title("–ó–æ–Ω–∞ –í—ñ–¥—á—É–∂–µ–Ω–Ω—è")
root.geometry("600x400")
root.config(bg="#2b2b2b")

tk.Label(root, text="üéÆ –í—ñ—Ç–∞—î–º–æ –≤ –≥—Ä—ñ –ó–æ–Ω–∞ –í—ñ–¥—á—É–∂–µ–Ω–Ω—è", font=("Arial", 18), bg="#2b2b2b", fg="white").pack(pady=20)
stats = tk.Label(root, text="", font=("Arial", 13), bg="#2b2b2b", fg="lightgray")
stats.pack(pady=10)
update_stats()

btn_config = {"font": ("Arial", 14), "bg": "#444", "fg": "white", "padx": 10, "pady": 10}
tk.Button(root, text="üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", command=inventory_window, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="‚ò¢ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏", command=show_artifacts, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="üßî –î–æ –°–∏–¥–æ—Ä–æ–≤–∏—á–∞", command=shop, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="‚ùå –í–∏–π—Ç–∏", command=root.quit, font=("Arial", 14), bg="#a00", fg="white").pack(fill='x', padx=40, pady=10)

root.mainloop()
