import tkinter as tk
from tkinter import messagebox
import random

money = 1000
HP = 100
radiation = 0
hungruy = 0
armor = 0
ammo = {
    "–ü—ñ—Å—Ç–æ–ª–µ—Ç": 10,
    "–ê–≤—Ç–æ–º–∞—Ç": 0,
    "–°–Ω–∞–π–ø–µ—Ä—Å—å–∫–∞ –≥–≤–∏–Ω—Ç—ñ–≤–∫–∞": 0
}
bg = "#2b2b2b"

artifacts = [
    {"name": "–ö–†–û–í –ö–ê–ú–ï–ù–Æ", "description": "–ü–æ—Å—Ç—É–ø–æ–≤–æ –≤—ñ–¥–Ω–æ–≤–ª—é—î –∑–¥–æ—Ä–æ–≤'—è.", "effects": {"HP": 10}, "price": 150},
    {"name": "–î–£–®–ê", "description": "–ó–º–µ–Ω—à—É—î —Ä–∞–¥—ñ–∞—Ü—ñ—é.", "effects": {"radiation": -5}, "price": 250},
    {"name": "–°–ï–†–¶–ï", "description": "–í—ñ–¥–Ω–æ–≤–ª—é—î –±—Ä–æ–Ω—é.", "effects": {"armor": 15}, "price": 220},
    {"name": "–ü–õ–ê–°–¢–ò–ù–ê", "description": "–ó–º–µ–Ω—à—É—î –≥–æ–ª–æ–¥.", "effects": {"hungruy": -10}, "price": 100},
    {"name": "–ó–ê–©–ò–¢–ê", "description": "–ó–º–µ–Ω—à—É—î —Ä–∞–¥—ñ–∞—Ü—ñ—é.", "effects": {"radiation": -10}, "price": 200},
    {"name": "–ü–†–ò–ü'–Ø–¢–¨", "description": "–í—ñ–¥–Ω–æ–≤–ª—é—î –±—Ä–æ–Ω—é.", "effects": {"armor": 20}, "price": 300},
    {"name": "–°–í–Ü–¢–õ–û", "description": "–ó–±—ñ–ª—å—à—É—î –≤–∏–¥–∏–º—ñ—Å—Ç—å —É —Ç–µ–º—Ä—è–≤—ñ.", "effects": {}, "price": 50},
    {"name": "–ß–û–†–ù–ê –î–Ü–†–ê", "description": "–ó–º–µ–Ω—à—É—î –≥–æ–ª–æ–¥.", "effects": {"hungruy": -5}, "price": 80},
]
inventory_artifacts = []

def update_stats():
    stats.config(text=f"‚ù§Ô∏è{HP}  ‚ò¢ {radiation}%   üçñ {hungruy}%   üõ° {armor}%   üí∞ {money}‚Ç¥   üî´ –ü–∞—Ç—Ä–æ–Ω–∏: {sum(ammo.values())}")

def use_artifact(index):
    global HP, radiation
    if 0 <= index < len(inventory_artifacts):
        art = inventory_artifacts.pop(index)
        HP = min(100, HP + art["effects"].get("HP", 0))
        radiation = max(0, radiation + art["effects"].get("radiation", 0))
        update_stats()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {art['name']}")
        show_artifacts()
    else:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")

def show_artifacts():
    win = tk.Toplevel(root)
    win.title("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏")
    win.geometry("500x400")
    win.config(bg=bg)
    if not inventory_artifacts:
        tk.Label(win, text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤", font=("Arial", 12), bg=bg, fg="white").pack(pady=20)
        return
    for i, art in enumerate(inventory_artifacts):
        btn = tk.Button(win, text=f"{i+1}. {art['name']} ‚Äî {art['description']}", font=("Arial", 11), bg=bg, fg="#02d42f",
                        command=lambda i=i: use_artifact(i))
        btn.pack(fill='x', padx=10, pady=5)

def inventory_window():
    win = tk.Toplevel(root)
    win.title("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä")
    win.geometry("400x300")
    win.config(bg=bg)
    tk.Label(win, text="üì¶ –í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", font=("Arial", 16), bg=bg, fg="white").pack(pady=10)

    for weapon, count in ammo.items():
        tk.Label(win, text=f"{weapon} ‚Äî {count} –ø–∞—Ç—Ä–æ–Ω—ñ–≤", font=("Arial", 12), bg=bg, fg="white").pack(pady=2)

    def heal():
        global HP
        HP = min(100, HP + 20)
        update_stats()
        messagebox.showinfo("–ê–ø—Ç–µ—á–∫–∞", "–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –∞–ø—Ç–µ—á–∫—É.")

    tk.Button(win, text="ü©π –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–ø—Ç–µ—á–∫—É", command=heal, font=("Arial", 12), bg="#28a745", fg="white").pack(pady=10)

def sidor():
    win = tk.Toplevel(root)
    win.title("–°–∏–¥–æ—Ä–æ–≤–∏—á")
    win.geometry("450x400")
    win.config(bg=bg)
    
    tk.Label(win, text="–≥—Ä–æ—à—ñ: " + str(money) + "‚Ç¥", font=("Arial", 14), bg=bg, fg="white").pack(pady=10)
    tk.Label(win, text="üíº –ú–∞–≥–∞–∑–∏–Ω –°–∏–¥–æ—Ä–æ–≤–∏—á–∞", font=("Arial", 16), bg=bg, fg="white").pack(pady=5)

    def show_artifact_buttons():
        for art in artifacts:
            btn = tk.Button(win, text=f"{art['name']} ‚Äî {art['price']}‚Ç¥\n{art['description']}",
                            font=("Arial", 11),
                            command=lambda a=art: buy_artifact(a),
                            wraplength=400, justify='left',
                            bg="#444", fg="white")
            btn.pack(fill='x', padx=10, pady=5)

    def buy_ammo(type_, price, quantity):
        global money
        if money >= price:
            money -= price
            ammo[type_] += quantity
            update_stats()
            messagebox.showinfo("–ö—É–ø–ª–µ–Ω–æ", f"–í–∏ –∫—É–ø–∏–ª–∏ {quantity} –ø–∞—Ç—Ä–æ–Ω—ñ–≤ –¥–ª—è {type_}")
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π!")

    tk.Button(win, text="üî´ –ö—É–ø–∏—Ç–∏ –ø—ñ—Å—Ç–æ–ª–µ—Ç–Ω—ñ –ø–∞—Ç—Ä–æ–Ω–∏ (10—à—Ç - 100‚Ç¥)", command=lambda: buy_ammo("–ü—ñ—Å—Ç–æ–ª–µ—Ç", 100, 10), bg="#555", fg="white").pack(pady=2)
    tk.Button(win, text="üî´ –ö—É–ø–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–Ω—ñ –ø–∞—Ç—Ä–æ–Ω–∏ (20—à—Ç - 250‚Ç¥)", command=lambda: buy_ammo("–ê–≤—Ç–æ–º–∞—Ç", 250, 20), bg="#555", fg="white").pack(pady=2)
    tk.Button(win, text="üî´ –ö—É–ø–∏—Ç–∏ —Å–Ω–∞–π–ø–µ—Ä—Å—å–∫—ñ –ø–∞—Ç—Ä–æ–Ω–∏ (5—à—Ç - 200‚Ç¥)", command=lambda: buy_ammo("–°–Ω–∞–π–ø–µ—Ä—Å—å–∫–∞ –≥–≤–∏–Ω—Ç—ñ–≤–∫–∞", 200, 5), bg="#555", fg="white").pack(pady=2)

    tk.Button(win, text="üõí –ü—Ä–∏–¥–±–∞—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏", command=show_artifact_buttons, font=("Arial", 12), bg="#28a745", fg="white").pack(pady=10)
    tk.Button(win, text="‚ùå –í–∏–π—Ç–∏", command=win.destroy, font=("Arial", 12), bg="#a00", fg="white").pack(pady=10)

def buy_artifact(artifact):
    global money
    if money >= artifact["price"]:
        inventory_artifacts.append(artifact)
        money -= artifact["price"]
        update_stats()
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏: {artifact['name']}")
    else:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–æ—à–µ–π!")

def start_shooting_range():
    range_win = tk.Toplevel(root)
    range_win.title("üéØ –¢–∏—Ä")
    range_win.geometry("500x500")
    range_win.config(bg=bg)

    score = tk.IntVar(value=0)
    time_left = tk.IntVar(value=30)

    tk.Label(range_win, text="üéØ –ü–æ–ø–∞–¥–∏ –≤ 20 —Ü—ñ–ª–µ–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥", font=("Arial", 14), bg=bg, fg="white").pack(pady=10)
    score_label = tk.Label(range_win, textvariable=score, font=("Arial", 12), bg=bg, fg="white")
    score_label.pack()

    canvas = tk.Canvas(range_win, width=400, height=300, bg="#1e1e1e", highlightthickness=0)
    canvas.pack(pady=10)

    def create_target():
        canvas.delete("all")
        x, y = random.randint(10, 360), random.randint(10, 260)
        target = canvas.create_text(x, y, text="üçæ", font=("Arial", 24), fill="red", tags="target")

        target_hit = {"value": False}

        def on_click(event):
            if not target_hit["value"]:
                canvas.delete(target)
                target_hit["value"] = True
                score.set(score.get() + 1)
                update_stats()
                if score.get() >= 20:
                    messagebox.showinfo("–ü–µ—Ä–µ–º–æ–≥–∞", "üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏! –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                    range_win.destroy()
                else:
                    range_win.after(300, create_target)

        canvas.tag_bind("target", "<Button-1>", on_click)

        def remove_if_not_hit():
            if not target_hit["value"]:
                canvas.delete("target")
                if time_left.get() > 0:
                    range_win.after(300, create_target)

        canvas.after(2000, remove_if_not_hit)

    def update_timer():
        if time_left.get() > 0:
            time_left.set(time_left.get() - 1)
            timer_label.config(text=f"‚è± –ß–∞—Å: {time_left.get()} —Å–µ–∫")
            range_win.after(1000, update_timer)
        elif score.get() < 20:
            messagebox.showinfo("–ü–æ—Ä–∞–∑–∫–∞", f"‚ùå –í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏. –í–ª—É—á–µ–Ω–æ: {score.get()}")
            range_win.destroy()

    timer_label = tk.Label(range_win, text="", font=("Arial", 12), bg=bg, fg="white")
    timer_label.pack()

    tk.Button(range_win, text="üö™ –ü–æ–∫–∏–Ω—É—Ç–∏ —Ç–∏—Ä", command=range_win.destroy, font=("Arial", 12), bg="#a00", fg="white").pack(pady=10)

    create_target()
    update_timer()


root = tk.Tk()
root.title("–ó–æ–Ω–∞ –í—ñ–¥—á—É–∂–µ–Ω–Ω—è")
root.geometry("600x450")
root.config(bg=bg)

tk.Label(root, text="üéÆ –í—ñ—Ç–∞—î–º–æ –≤ Ce–ª—ñ –ù–æ–≤–∞—á–∫—ñ–≤", font=("Arial", 18), bg=bg, fg="white").pack(pady=20)
stats = tk.Label(root, text="", font=("Arial", 13), bg=bg, fg="lightgray")
stats.pack(pady=10)
update_stats()

btn_config = {"font": ("Arial", 14), "bg": "#444", "fg": "white", "padx": 10, "pady": 10}
tk.Button(root, text="üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", command=inventory_window, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="‚ò¢ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏", command=show_artifacts, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="üßî –î–æ –°–∏–¥–æ—Ä–æ–≤–∏—á–∞", command=sidor, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="üéØ –ü—ñ—Ç–∏ –≤ —Ç–∏—Ä", command=start_shooting_range, **btn_config).pack(fill='x', padx=40, pady=5)
tk.Button(root, text="‚ùå –í–∏–π—Ç–∏", command=root.quit, font=("Arial", 14), bg="#a00", fg="white").pack(fill='x', padx=40, pady=10)

root.mainloop()

